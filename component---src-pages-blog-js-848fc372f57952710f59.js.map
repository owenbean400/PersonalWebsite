{"version":3,"file":"component---src-pages-blog-js-848fc372f57952710f59.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/buttons/stationaryButton.js","webpack://gatsby-starter-hello-world/./src/components/footer/footerlinks.js","webpack://gatsby-starter-hello-world/./src/components/footer/footer.js","webpack://gatsby-starter-hello-world/./src/components/navbar/navlinks.js","webpack://gatsby-starter-hello-world/./src/components/navbar/hamburger.js","webpack://gatsby-starter-hello-world/./src/components/navbar/sidebar.js","webpack://gatsby-starter-hello-world/./src/components/navbar/navbar.js","webpack://gatsby-starter-hello-world/./node_modules/react-hook-form/dist/index.esm.mjs","webpack://gatsby-starter-hello-world/./src/pages/blog.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport './buttons.scss';\n\nexport default function StationaryButton(props){\n    if(typeof(props.isNewTab) != \"undefined\" && props.isNewTab){\n        return(\n            <div>\n                <a href={props.link} target=\"_blank\" rel=\"noreferrer\">\n                    <button className=\"stationary-button\" style={props.css} type={(typeof(props.buttonType) != \"undefined\") ? props.buttonType : \"button\"}>{props.title}</button>\n                </a>\n            </div>\n        )\n    }\n    else{\n        return(\n                    <div>\n                        <Link to={props.link}>\n                            <button className=\"stationary-button\" style={props.css}>{props.title}</button>\n                        </Link>\n                    </div>\n                )\n    }\n}","import React from 'react';\nimport { Link } from 'gatsby';\n\nclass FooterLinks extends React.Component{\n\n    render(){\n\n        const LINKS = this.props.footerlinks.map((string) => \n        <Link className=\"footer-link\" style={{color: 'white'}} to={`/${string.toLowerCase().replace(/\\s/g, '')}`} key={string}>{string}</Link>\n    );\n\n        return(\n            <div>\n                <div className=\"footer-links-container\">\n                    {LINKS}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default FooterLinks","import React from \"react\"\nimport FooterLinks from \"./footerlinks\"\nimport StationaryButton from \"../buttons/stationaryButton\"\nimport \"./footer.scss\"\n\nconst DATE = new Date()\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"action-container\">\n          <StationaryButton title=\"Repo\" link=\"/repo\" />\n          <StationaryButton title=\"About\" link=\"/about\" />\n          <StationaryButton title=\"Contact\" link=\"/contact\" />\n        </div>\n        <footer>\n          <div className=\"links-container\">\n            <FooterLinks footerlinks={[\"Repo\", \"Projects\"]} />\n            <FooterLinks footerlinks={[\"Blog\", \"Games\", \"Privacy Policy\"]} />\n            <FooterLinks footerlinks={[\"Contact\", \"About\"]} />\n          </div>\n          <p>\n            Copyright © {DATE.getFullYear()} Owen Bean. All rights reserved.\n          </p>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default Footer\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport './navbar.js';\n\nclass Navlinks extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            css:{\n                height: '64px'\n            }\n        }\n        this.showLinks = this.showLinks.bind(this);\n        this.hideLinks = this.hideLinks.bind(this);\n    }\n\n    showLinks = () => {\n        this.setState ( state => ({\n            css:{\n                height: this.props.links.length * 64 + 'px'\n            }\n        }))\n    }\n\n    hideLinks = () => {\n        this.setState ( state => ({\n            css:{\n                height: '64px'\n            }\n        }))\n    }\n\n    render(){\n\n\n        return(\n            <div>\n                <div onMouseOver={this.showLinks} onMouseLeave={this.hideLinks} style={this.state.css} className=\"nav-links-container\">\n                    {this.props.links.map((string) => \n                        <Link className=\"nav-link\" to={`/${string.toLowerCase().replace(/\\s/g, '')}`} key={string}>{string}</Link>\n                    )};\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Navlinks","import React from 'react';\n\nconst Hamburger = (props) => {\n    return(\n        <div className=\"hamburger-container\" onClick={props.clickMe}>\n            <div className=\"hamburger-bar\"></div>\n            <div className=\"hamburger-bar\"></div>\n            <div className=\"hamburger-bar\"></div>\n        </div>\n    )\n}\n\nexport default Hamburger","import React from 'react';\nimport { Link } from 'gatsby';\n\nclass Sidebar extends React.Component{\n\n    \n\n    render(){\n        const LINKS = this.props.sidelinks.map((string) => \n            <Link className=\"nav-side-link\" to={`/${string.toLowerCase().replace(/\\s/g, '')}`} style={{color: 'white'}} key={string}>{string.charAt(0).toUpperCase() + string.substring(1, string.length)}</Link>\n        );\n\n        return(\n            <div className=\"sidebar-container\" style={this.props.sidebarCss}>\n                <div className=\"sidebar-header-container\">\n                    <h1 onClick={this.props.clickHide}>Owen Bean</h1>\n                    <div className=\"spacer\"></div>\n                    <div className=\"x-container\" onClick={this.props.clickHide}>\n                        <div className=\"x-bar-left\"></div>\n                        <div className=\"x-bar-right\"></div>\n                    </div>\n                </div>\n                <div className='sidebar-links-container' onClick={this.props.clickHide}>\n                    {LINKS}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Sidebar","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Navlinks from \"./navlinks.js\"\nimport Hamburger from \"./hamburger.js\"\nimport Sidebar from \"./sidebar.js\"\nimport \"./navbar.scss\"\n\nconst LINKS = {\n  repo: [\"Repo\", \"Projects\"],\n  blog: [\"Blog\", \"Games\"],\n  about: [\"About\", \"Contact\"],\n}\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      css: {\n        top: \"-100vh\",\n      },\n    }\n    this.showSide = this.showSide.bind(this)\n    this.hideSide = this.hideSide.bind(this)\n  }\n\n  showSide = () => {\n    this.setState(state => ({\n      css: {\n        top: 0,\n      },\n    }))\n  }\n\n  hideSide = () => {\n    this.setState(state => ({\n      css: {\n        top: \"-100vh\",\n      },\n    }))\n  }\n\n  render() {\n    var navLinksHTML = []\n    for (let i = 0; i < Object.keys(LINKS).length; i++) {\n      navLinksHTML.push(\n        <Navlinks\n          className=\"nav-links-container\"\n          links={LINKS[Object.keys(LINKS)[i]]}\n          key={LINKS[Object.keys(LINKS)[i]]}\n        />\n      )\n    }\n\n    return (\n      <div>\n        <nav>\n          <h1>\n            <Link to=\"/\">Owen Bean</Link>\n          </h1>\n          <div className=\"spacer\"></div>\n          {navLinksHTML}\n          <Hamburger clickMe={this.showSide} />\n          <Sidebar\n            sidelinks={Object.keys(LINKS)}\n            sidebarCss={this.state.css}\n            clickHide={this.hideSide}\n          />\n        </nav>\n      </div>\n    )\n  }\n}\n\nexport default Navbar\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = compact(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) && get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n        isValidating: !!get((formState || _formState).validatingFields, name),\n        error: get((formState || _formState).errors, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? []\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","import { Link, graphql } from \"gatsby\"\nimport React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport Footer from \"../components/footer/footer\"\nimport Navbar from \"../components/navbar/navbar\"\nimport \"../pageScss/blog.sass\"\n\nexport default function Blog({ data }) {\n  const { register, watch } = useForm()\n  var links = []\n  var linksCount = 0\n\n  for (let i = 0; i < data.allMarkdownRemark.edges.length; i++) {\n    var titleSearch = data.allMarkdownRemark.edges[i].node.frontmatter.title\n      .toLowerCase()\n      .split(\" \")\n    const date = data.allMarkdownRemark.edges[i].node.frontmatter.date.split(\n      \"-\"\n    )\n    for (let i = 0; i < date.length; i++) {\n      titleSearch.push(date[i])\n    }\n    titleSearch.push(data.allMarkdownRemark.edges[i].node.frontmatter.date)\n    var isFound = true\n    if (watch(\"search\") !== undefined) {\n      var searchValue = watch(\"search\").toLowerCase().split(\" \")\n      isFound = checkIfFound(titleSearch, searchValue)\n    }\n    if (isFound) {\n      links.push(\n        <div\n          className=\"blog-card\"\n          key={data.allMarkdownRemark.edges[i].node.frontmatter.title}\n        >\n          <Link to={data.allMarkdownRemark.edges[i].node.fields.slug}>\n            {data.allMarkdownRemark.edges[i].node.frontmatter.title}\n          </Link>\n          <div className=\"blog-info\">\n            <p>{data.allMarkdownRemark.edges[i].node.frontmatter.date}</p>\n            <p>\n              Word Count: {data.allMarkdownRemark.edges[i].node.wordCount.words}\n            </p>\n          </div>\n        </div>\n      )\n      linksCount++\n    } else {\n      links.push(null)\n    }\n    if (links.length > 16) {\n      break\n    }\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <main className=\"blog-main\">\n        <h1>Blog Posts</h1>\n        <form>\n          <input\n            name=\"search\"\n            type=\"text\"\n            ref={register}\n            defaultValue=\"\"\n            className=\"blog-search-bar\"\n            placeholder=\"Search for Blog\"\n          />\n        </form>\n        <div className=\"blog-link-container\">{links}</div>\n        {linksCount < 4 ? (\n          linksCount < 1 ? (\n            <p\n              style={{\n                height: \"200px\",\n                width: \"300px\",\n                margin: \"32px auto\",\n                display: \"block\",\n              }}\n            >\n              Nothing was found...\n            </p>\n          ) : (\n            <div style={{ height: \"120px\", width: \"100px\" }}></div>\n          )\n        ) : null}\n      </main>\n      <Footer />\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: [DESC] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          wordCount {\n            words\n          }\n          frontmatter {\n            date\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nfunction checkIfFound(title, search) {\n  for (let i = 0; i < title.length; i++) {\n    for (let j = 0; j < search.length; j++) {\n      var checkCharacter = true\n      for (let k = 0; k < search[j].length; k++) {\n        if (search[j].charAt(k) !== title[i].charAt(k)) {\n          checkCharacter = false\n        }\n      }\n      if (checkCharacter) {\n        return true\n      }\n    }\n  }\n  return false\n}\n"],"names":["StationaryButton","props","isNewTab","React","href","link","target","rel","className","style","css","type","buttonType","title","Link","to","FooterLinks","_React$Component","apply","arguments","_inheritsLoose","prototype","render","LINKS","this","footerlinks","map","string","color","toLowerCase","replace","key","DATE","Date","Footer","getFullYear","Navlinks","_this","call","showLinks","setState","state","height","links","length","hideLinks","bind","onMouseOver","onMouseLeave","onClick","clickMe","Sidebar","sidelinks","charAt","toUpperCase","substring","sidebarCss","clickHide","repo","blog","about","Navbar","showSide","top","hideSide","navLinksHTML","i","Object","keys","push","Hamburger","isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","checked","isNameInFieldArray","names","name","has","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","Set","Blob","FileList","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","set","index","tempPath","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","defineProperty","_key","_proxyFormState","isEmptyObject","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","useSubscribe","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","fieldName","watchAll","appendErrors","validateAllFieldCriteria","errors","message","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","some","watchName","startsWith","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","values","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","_formValues","shouldUnregister","_state","unMount","array","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","_getWatch","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_removeUnmounted","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","Blog","_ref","_formControl","_values","useForm","linksCount","allMarkdownRemark","edges","titleSearch","node","frontmatter","date","isFound","checkIfFound","slug","wordCount","words","placeholder","width","margin","display","j","checkCharacter","k"],"sourceRoot":""}