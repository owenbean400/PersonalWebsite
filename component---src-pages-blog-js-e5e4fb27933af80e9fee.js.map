{"version":3,"file":"component---src-pages-blog-js-e5e4fb27933af80e9fee.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./src/components/buttons/stationaryButton.js","webpack://gatsby-starter-hello-world/./src/components/footer/footerlinks.js","webpack://gatsby-starter-hello-world/./src/components/footer/footer.js","webpack://gatsby-starter-hello-world/./src/components/navbar/navlinks.js","webpack://gatsby-starter-hello-world/./src/components/navbar/hamburger.js","webpack://gatsby-starter-hello-world/./src/components/navbar/sidebar.js","webpack://gatsby-starter-hello-world/./src/components/navbar/navbar.js","webpack://gatsby-starter-hello-world/./node_modules/react-hook-form/dist/index.esm.js","webpack://gatsby-starter-hello-world/./src/pages/blog.js","webpack://gatsby-starter-hello-world/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport './buttons.scss';\r\n\r\nexport default function StationaryButton(props){\r\n    if(typeof(props.isNewTab) != \"undefined\" && props.isNewTab){\r\n        return(\r\n            <div>\r\n                <a href={props.link} target=\"_blank\" rel=\"noreferrer\">\r\n                    <button className=\"stationary-button\" style={props.css} type={(typeof(props.buttonType) != \"undefined\") ? props.buttonType : \"button\"}>{props.title}</button>\r\n                </a>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n                    <div>\r\n                        <Link to={props.link}>\r\n                            <button className=\"stationary-button\" style={props.css}>{props.title}</button>\r\n                        </Link>\r\n                    </div>\r\n                )\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nclass FooterLinks extends React.Component{\r\n\r\n    render(){\r\n\r\n        const LINKS = this.props.footerlinks.map((string) => \r\n        <Link className=\"footer-link\" style={{color: 'white'}} to={`/${string.toLowerCase().replace(/\\s/g, '')}`} key={string}>{string}</Link>\r\n    );\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"footer-links-container\">\r\n                    {LINKS}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FooterLinks","import React from \"react\"\r\nimport FooterLinks from \"./footerlinks\"\r\nimport StationaryButton from \"../buttons/stationaryButton\"\r\nimport \"./footer.scss\"\r\n\r\nconst DATE = new Date()\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"action-container\">\r\n          <StationaryButton title=\"Repo\" link=\"/repo\" />\r\n          <StationaryButton title=\"About\" link=\"/about\" />\r\n          <StationaryButton title=\"Contact\" link=\"/contact\" />\r\n        </div>\r\n        <footer>\r\n          <div className=\"links-container\">\r\n            <FooterLinks footerlinks={[\"Repo\", \"WearOS\", \"Websites\"]} />\r\n            <FooterLinks footerlinks={[\"Blog\", \"Games\", \"Privacy Policy\"]} />\r\n            <FooterLinks footerlinks={[\"Contact\", \"About\"]} />\r\n          </div>\r\n          <p>\r\n            Copyright © {DATE.getFullYear()} Owen Bean. All rights reserved.\r\n          </p>\r\n        </footer>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport './navbar.js';\r\n\r\nclass Navlinks extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            css:{\r\n                height: '64px'\r\n            }\r\n        }\r\n        this.showLinks = this.showLinks.bind(this);\r\n        this.hideLinks = this.hideLinks.bind(this);\r\n    }\r\n\r\n    showLinks = () => {\r\n        this.setState ( state => ({\r\n            css:{\r\n                height: this.props.links.length * 64 + 'px'\r\n            }\r\n        }))\r\n    }\r\n\r\n    hideLinks = () => {\r\n        this.setState ( state => ({\r\n            css:{\r\n                height: '64px'\r\n            }\r\n        }))\r\n    }\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div>\r\n                <div onMouseOver={this.showLinks} onMouseLeave={this.hideLinks} style={this.state.css} className=\"nav-links-container\">\r\n                    {this.props.links.map((string) => \r\n                        <Link className=\"nav-link\" to={`/${string.toLowerCase().replace(/\\s/g, '')}`} key={string}>{string}</Link>\r\n                    )};\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navlinks","import React from 'react';\r\n\r\nconst Hamburger = (props) => {\r\n    return(\r\n        <div className=\"hamburger-container\" onClick={props.clickMe}>\r\n            <div className=\"hamburger-bar\"></div>\r\n            <div className=\"hamburger-bar\"></div>\r\n            <div className=\"hamburger-bar\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hamburger","import React from 'react';\r\nimport { Link } from 'gatsby';\r\n\r\nclass Sidebar extends React.Component{\r\n\r\n    \r\n\r\n    render(){\r\n        const LINKS = this.props.sidelinks.map((string) => \r\n            <Link className=\"nav-side-link\" to={`/${string.toLowerCase().replace(/\\s/g, '')}`} style={{color: 'white'}} key={string}>{string.charAt(0).toUpperCase() + string.substring(1, string.length)}</Link>\r\n        );\r\n\r\n        return(\r\n            <div className=\"sidebar-container\" style={this.props.sidebarCss}>\r\n                <div className=\"sidebar-header-container\">\r\n                    <h1 onClick={this.props.clickHide}>Owen Bean</h1>\r\n                    <div className=\"spacer\"></div>\r\n                    <div className=\"x-container\" onClick={this.props.clickHide}>\r\n                        <div className=\"x-bar-left\"></div>\r\n                        <div className=\"x-bar-right\"></div>\r\n                    </div>\r\n                </div>\r\n                <div className='sidebar-links-container' onClick={this.props.clickHide}>\r\n                    {LINKS}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Navlinks from \"./navlinks.js\"\r\nimport Hamburger from \"./hamburger.js\"\r\nimport Sidebar from \"./sidebar.js\"\r\nimport \"./navbar.scss\"\r\n\r\nconst LINKS = {\r\n  repo: [\"Repo\", \"WearOS\", \"Websites\"],\r\n  blog: [\"Blog\", \"Games\"],\r\n  about: [\"About\", \"Contact\"],\r\n}\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      css: {\r\n        top: \"-100vh\",\r\n      },\r\n    }\r\n    this.showSide = this.showSide.bind(this)\r\n    this.hideSide = this.hideSide.bind(this)\r\n  }\r\n\r\n  showSide = () => {\r\n    this.setState(state => ({\r\n      css: {\r\n        top: 0,\r\n      },\r\n    }))\r\n  }\r\n\r\n  hideSide = () => {\r\n    this.setState(state => ({\r\n      css: {\r\n        top: \"-100vh\",\r\n      },\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    var navLinksHTML = []\r\n    for (let i = 0; i < Object.keys(LINKS).length; i++) {\r\n      navLinksHTML.push(\r\n        <Navlinks\r\n          className=\"nav-links-container\"\r\n          links={LINKS[Object.keys(LINKS)[i]]}\r\n          key={LINKS[Object.keys(LINKS)[i]]}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <nav>\r\n          <h1>\r\n            <Link to=\"/\">Owen Bean</Link>\r\n          </h1>\r\n          <div className=\"spacer\"></div>\r\n          {navLinksHTML}\r\n          <Hamburger clickMe={this.showSide} />\r\n          <Sidebar\r\n            sidelinks={Object.keys(LINKS)}\r\n            sidebarCss={this.state.css}\r\n            clickHide={this.hideSide}\r\n          />\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar\r\n","import { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = (value) => value instanceof HTMLElement;\n\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst SELECT = 'select';\r\nconst UNDEFINED = 'undefined';\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\n\nfunction attachEventListeners({ ref }, shouldAttachChangeEvent, handleChange) {\r\n    if (isHTMLElement(ref) && handleChange) {\r\n        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !(value instanceof Date);\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar compact = (value) => value.filter(Boolean);\n\nvar stringToPath = (input) => compact(input\r\n    .replace(/[\"|']/g, '')\r\n    .replace(/\\[/g, '.')\r\n    .replace(/\\]/g, '')\r\n    .split('.'));\n\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data, value = {}) => {\r\n    for (const key in data) {\r\n        !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\r\n    }\r\n    return value;\r\n};\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (obj = {}, path, defaultValue) => {\r\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? isUndefined(obj[path])\r\n            ? defaultValue\r\n            : obj[path]\r\n        : result;\r\n};\n\nvar focusOnErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus && isUndefined(field.ref.focus())) {\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (isHTMLElement(ref) && ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.ref.checked\r\n        ? {\r\n            isValid: true,\r\n            value: option.ref.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.ref.checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || value === ''\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\r\n    const field = fieldsRef.current[name];\r\n    if (field) {\r\n        const { ref: { value, disabled }, ref, valueAsNumber, valueAsDate, setValueAs, } = field;\r\n        if (disabled && excludeDisabled) {\r\n            return;\r\n        }\r\n        if (isFileInput(ref)) {\r\n            return ref.files;\r\n        }\r\n        if (isRadioInput(ref)) {\r\n            return getRadioValue(field.options).value;\r\n        }\r\n        if (isMultipleSelect(ref)) {\r\n            return getMultipleSelectValue(ref.options);\r\n        }\r\n        if (isCheckBoxInput(ref)) {\r\n            return getCheckboxValue(field.options).value;\r\n        }\r\n        return valueAsNumber\r\n            ? +value\r\n            : valueAsDate\r\n                ? ref.valueAsDate\r\n                : setValueAs\r\n                    ? setValueAs(value)\r\n                    : value;\r\n    }\r\n    if (shallowFieldsStateRef) {\r\n        return get(shallowFieldsStateRef.current, name);\r\n    }\r\n}\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction baseGet(object, updatePath) {\r\n    const path = updatePath.slice(0, -1);\r\n    const length = path.length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction unset(object, path) {\r\n    const updatePath = isKey(path) ? [path] : stringToPath(path);\r\n    const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\r\n    const key = updatePath[updatePath.length - 1];\r\n    let previousObjRef = undefined;\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\r\n        let index = -1;\r\n        let objectRef = undefined;\r\n        const currentPaths = updatePath.slice(0, -(k + 1));\r\n        const currentPathsLength = currentPaths.length - 1;\r\n        if (k > 0) {\r\n            previousObjRef = object;\r\n        }\r\n        while (++index < currentPaths.length) {\r\n            const item = currentPaths[index];\r\n            objectRef = objectRef ? objectRef[item] : object[item];\r\n            if (currentPathsLength === index &&\r\n                ((isObject(objectRef) && isEmptyObject(objectRef)) ||\r\n                    (Array.isArray(objectRef) &&\r\n                        !objectRef.filter((data) => (isObject(data) && !isEmptyObject(data)) || isBoolean(data)).length))) {\r\n                previousObjRef ? delete previousObjRef[item] : delete object[item];\r\n            }\r\n            previousObjRef = objectRef;\r\n        }\r\n    }\r\n    return object;\r\n}\n\nconst isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;\r\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\r\n    const { ref, ref: { name }, } = field;\r\n    const fieldRef = fieldsRef.current[name];\r\n    if (!shouldUnregister) {\r\n        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\r\n    }\r\n    if (!ref.type || !fieldRef) {\r\n        delete fieldsRef.current[name];\r\n        return;\r\n    }\r\n    if (isRadioInput(ref) || isCheckBoxInput(ref)) {\r\n        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\r\n            compact(fieldRef.options).forEach((option = {}, index) => {\r\n                if ((isDetached(option.ref) && isSameRef(option, option.ref)) ||\r\n                    forceDelete) {\r\n                    removeAllEventListeners(option.ref, handleChange);\r\n                    unset(fieldRef.options, `[${index}]`);\r\n                }\r\n            });\r\n            if (fieldRef.options && !compact(fieldRef.options).length) {\r\n                delete fieldsRef.current[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fieldsRef.current[name];\r\n        }\r\n    }\r\n    else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        delete fieldsRef.current[name];\r\n    }\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepMerge(target, source) {\r\n    if (isPrimitive(target) || isPrimitive(source)) {\r\n        return source;\r\n    }\r\n    for (const key in source) {\r\n        const targetValue = target[key];\r\n        const sourceValue = source[key];\r\n        try {\r\n            target[key] =\r\n                (isObject(targetValue) && isObject(sourceValue)) ||\r\n                    (Array.isArray(targetValue) && Array.isArray(sourceValue))\r\n                    ? deepMerge(targetValue, sourceValue)\r\n                    : sourceValue;\r\n        }\r\n        catch (_a) { }\r\n    }\r\n    return target;\r\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\r\n    let index = -1;\r\n    while (++index < values.length) {\r\n        for (const key in values[index]) {\r\n            if (Array.isArray(values[index][key])) {\r\n                !dirtyFields[index] && (dirtyFields[index] = {});\r\n                dirtyFields[index][key] = [];\r\n                setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\r\n            }\r\n            else {\r\n                get(defaultValues[index] || {}, key) === values[index][key]\r\n                    ? set(dirtyFields[index] || {}, key)\r\n                    : (dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), { [key]: true }));\r\n            }\r\n        }\r\n        parentNode &&\r\n            !dirtyFields.length &&\r\n            delete parentNode[parentName];\r\n    }\r\n    return dirtyFields;\r\n}\r\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));\n\nvar isString = (value) => typeof value === 'string';\n\nvar getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {\r\n    const output = {};\r\n    for (const name in fieldsRef.current) {\r\n        if (isUndefined(search) ||\r\n            (isString(search)\r\n                ? name.startsWith(search)\r\n                : Array.isArray(search) && search.find((data) => name.startsWith(data)))) {\r\n            output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\r\n        }\r\n    }\r\n    return shouldUnregister\r\n        ? transformToNestObject(output)\r\n        : deepMerge(shallowFieldsState, transformToNestObject(output));\r\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\r\n    if (isPrimitive(object1) ||\r\n        isPrimitive(object2) ||\r\n        object1 instanceof Date ||\r\n        object2 instanceof Date) {\r\n        return object1 === object2;\r\n    }\r\n    if (!isValidElement(object1)) {\r\n        const keys1 = Object.keys(object1);\r\n        const keys2 = Object.keys(object2);\r\n        if (keys1.length !== keys2.length) {\r\n            return false;\r\n        }\r\n        for (const key of keys1) {\r\n            const val1 = object1[key];\r\n            if (!(isErrorObject && key === 'ref')) {\r\n                const val2 = object2[key];\r\n                if ((isObject(val1) || Array.isArray(val1)) &&\r\n                    (isObject(val2) || Array.isArray(val2))\r\n                    ? !deepEqual(val1, val2, isErrorObject)\r\n                    : val1 !== val2) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n\nvar isErrorStateChanged = ({ errors, name, error, validFields, fieldsWithValidation, }) => {\r\n    const isValid = isUndefined(error);\r\n    const previousError = get(errors, name);\r\n    return ((isValid && !!previousError) ||\r\n        (!isValid && !deepEqual(previousError, error, true)) ||\r\n        (isValid && get(fieldsWithValidation, name) && !get(validFields, name)));\r\n};\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isMessage = (value) => isString(value) || isValidElement(value);\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isMessage(result) || (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isMessage(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? Object.assign(Object.assign({}, errors[name]), { types: Object.assign(Object.assign({}, (errors[name] && errors[name].types ? errors[name].types : {})), { [type]: message || true }) }) : {};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { value }, options, required, maxLength, minLength, min, max, pattern, validate, }, shallowFieldsStateRef) => {\r\n    const name = ref.name;\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = value === '';\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const { value, message } = isMessage(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox\r\n                    ? ((fieldsRef.current[name].options || [])[0] || {}).ref\r\n                    : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNaN(value)) {\r\n            const valueNumber = ref.valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(value);\r\n            if (isString(maxOutput.value)) {\r\n                exceedMax = valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value)) {\r\n                exceedMin = valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            value.length > maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            value.length < minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message,\r\n                ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const [key, validateFunction] of Object.entries(validate)) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateResult = await validateFunction(fieldValue);\r\n                const validateError = getValidateError(validateResult, validateRef, key);\r\n                if (validateError) {\r\n                    validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst getPath = (rootPath, values, paths = []) => {\r\n    for (const property in values) {\r\n        const rootName = (rootPath +\r\n            (isObject(values)\r\n                ? `.${property}`\r\n                : `[${property}]`));\r\n        isPrimitive(values[property])\r\n            ? paths.push(rootName)\r\n            : getPath(rootName, values[property], paths);\r\n    }\r\n    return paths;\r\n};\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {\r\n    let value = undefined;\r\n    watchFields.add(fieldName);\r\n    if (!isEmptyObject(fieldValues)) {\r\n        value = get(fieldValues, fieldName);\r\n        if (isObject(value) || Array.isArray(value)) {\r\n            getPath(fieldName, value).forEach((name) => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isSingleField\r\n            ? inputValue\r\n            : get(inputValue, fieldName)\r\n        : value;\r\n};\n\nvar skipValidation = ({ isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll, }) => {\r\n    if (isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? isReValidateOnChange : isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\n\nvar getFieldArrayParentName = (name) => name.substring(0, name.indexOf('['));\n\nconst isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\r\nvar isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));\n\nvar isSelectInput = (element) => element.type === `${SELECT}-one`;\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\r\n    const observer = new MutationObserver(() => {\r\n        for (const field of Object.values(fieldsRef.current)) {\r\n            if (field && field.options) {\r\n                for (const option of field.options) {\r\n                    if (option && option.ref && isDetached(option.ref)) {\r\n                        removeFieldEventListenerAndRef(field);\r\n                    }\r\n                }\r\n            }\r\n            else if (field && isDetached(field.ref)) {\r\n                removeFieldEventListenerAndRef(field);\r\n            }\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nvar isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n\nfunction cloneObject(data) {\r\n    let copy;\r\n    if (isPrimitive(data) || (isWeb && data instanceof File)) {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        copy = new Date(data.getTime());\r\n        return copy;\r\n    }\r\n    if (data instanceof Set) {\r\n        copy = new Set();\r\n        for (const item of data) {\r\n            copy.add(item);\r\n        }\r\n        return copy;\r\n    }\r\n    if (data instanceof Map) {\r\n        copy = new Map();\r\n        for (const key of data.keys()) {\r\n            copy.set(key, cloneObject(data.get(key)));\r\n        }\r\n        return copy;\r\n    }\r\n    copy = Array.isArray(data) ? [] : {};\r\n    for (const key in data) {\r\n        copy[key] = cloneObject(data[key]);\r\n    }\r\n    return copy;\r\n}\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\n\nvar isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nconst isWindowUndefined = typeof window === UNDEFINED;\r\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const fieldArrayDefaultValuesRef = useRef({});\r\n    const fieldArrayValuesRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const useWatchFieldsRef = useRef({});\r\n    const useWatchRenderFunctionsRef = useRef({});\r\n    const fieldsWithValidationRef = useRef({});\r\n    const validFieldsRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const defaultValuesAtRenderRef = useRef({});\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const shallowFieldsStateRef = useRef({});\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const contextRef = useRef(context);\r\n    const resolverRef = useRef(resolver);\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const modeRef = useRef(modeChecker(mode));\r\n    const { isOnSubmit, isOnTouch } = modeRef.current;\r\n    const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\r\n    const [formState, setFormState] = useState({\r\n        isDirty: false,\r\n        dirtyFields: {},\r\n        isSubmitted: false,\r\n        submitCount: 0,\r\n        touched: {},\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: !isOnSubmit,\r\n        errors: {},\r\n    });\r\n    const readFormStateRef = useRef({\r\n        isDirty: !isProxyEnabled,\r\n        dirtyFields: !isProxyEnabled,\r\n        touched: !isProxyEnabled || isOnTouch,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const formStateRef = useRef(formState);\r\n    const observerRef = useRef();\r\n    const { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange, } = useRef(modeChecker(reValidateMode)).current;\r\n    contextRef.current = context;\r\n    resolverRef.current = resolver;\r\n    formStateRef.current = formState;\r\n    shallowFieldsStateRef.current = shouldUnregister\r\n        ? {}\r\n        : isEmptyObject(shallowFieldsStateRef.current)\r\n            ? cloneObject(defaultValues)\r\n            : shallowFieldsStateRef.current;\r\n    const updateFormState = useCallback((state = {}) => {\r\n        if (!isUnMount.current) {\r\n            formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\r\n            setFormState(formStateRef.current);\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender = false, state = {}, isValid) => {\r\n        let shouldReRender = shouldRender ||\r\n            isErrorStateChanged({\r\n                errors: formStateRef.current.errors,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        const previousError = get(formStateRef.current.errors, name);\r\n        if (error) {\r\n            unset(validFieldsRef.current, name);\r\n            shouldReRender =\r\n                shouldReRender ||\r\n                    !previousError ||\r\n                    !deepEqual(previousError, error, true);\r\n            set(formStateRef.current.errors, name, error);\r\n        }\r\n        else {\r\n            if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\r\n                set(validFieldsRef.current, name, true);\r\n                shouldReRender = shouldReRender || previousError;\r\n            }\r\n            unset(formStateRef.current.errors, name);\r\n        }\r\n        if ((shouldReRender && !isNullOrUndefined(shouldRender)) ||\r\n            !isEmptyObject(state)) {\r\n            updateFormState(Object.assign(Object.assign({}, state), (resolverRef.current ? { isValid: !!isValid } : {})));\r\n        }\r\n    }, []);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const { ref, options } = fieldsRef.current[name];\r\n        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(ref)) {\r\n            (options || []).forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(ref) && !isString(value)) {\r\n            ref.files = value;\r\n        }\r\n        else if (isMultipleSelect(ref)) {\r\n            [...ref.options].forEach((selectRef) => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(ref) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = Array.isArray(value)\r\n                    ? !!value.find((data) => data === checkboxRef.value)\r\n                    : value === checkboxRef.value))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n    }, []);\r\n    const isFormDirty = useCallback((name, data) => {\r\n        if (readFormStateRef.current.isDirty) {\r\n            const formValues = getValues();\r\n            name && data && set(formValues, name, data);\r\n            return !deepEqual(formValues, isEmptyObject(defaultValuesRef.current)\r\n                ? defaultValuesAtRenderRef.current\r\n                : defaultValuesRef.current);\r\n        }\r\n        return false;\r\n    }, []);\r\n    const updateAndGetDirtyState = useCallback((name, shouldRender = true) => {\r\n        if (readFormStateRef.current.isDirty ||\r\n            readFormStateRef.current.dirtyFields) {\r\n            const isFieldDirty = !deepEqual(get(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\r\n            const previousIsDirty = formStateRef.current.isDirty;\r\n            isFieldDirty\r\n                ? set(formStateRef.current.dirtyFields, name, true)\r\n                : unset(formStateRef.current.dirtyFields, name);\r\n            const state = {\r\n                isDirty: isFormDirty(),\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            };\r\n            const isChanged = (readFormStateRef.current.isDirty &&\r\n                previousIsDirty !== state.isDirty) ||\r\n                (readFormStateRef.current.dirtyFields &&\r\n                    isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\r\n            isChanged && shouldRender && updateFormState(state);\r\n            return isChanged ? state : {};\r\n        }\r\n        return {};\r\n    }, []);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!fieldsRef.current[name]) {\r\n                console.warn('📋 Field is missing with `name` attribute: ', name);\r\n                return false;\r\n            }\r\n        }\r\n        const error = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];\r\n        shouldRenderBaseOnError(name, error, skipReRender);\r\n        return isUndefined(error);\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const executeSchemaOrResolverValidation = useCallback(async (names) => {\r\n        const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n        const previousFormIsValid = formStateRef.current.isValid;\r\n        if (Array.isArray(names)) {\r\n            const isInputsValid = names\r\n                .map((name) => {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(formStateRef.current.errors, name, error)\r\n                    : unset(formStateRef.current.errors, name);\r\n                return !error;\r\n            })\r\n                .every(Boolean);\r\n            updateFormState({\r\n                isValid: isEmptyObject(errors),\r\n            });\r\n            return isInputsValid;\r\n        }\r\n        else {\r\n            const error = get(errors, names);\r\n            shouldRenderBaseOnError(names, error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\r\n            return !error;\r\n        }\r\n    }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\r\n    const trigger = useCallback(async (name) => {\r\n        const fields = name || Object.keys(fieldsRef.current);\r\n        if (resolverRef.current) {\r\n            return executeSchemaOrResolverValidation(fields);\r\n        }\r\n        if (Array.isArray(fields)) {\r\n            !name && (formStateRef.current.errors = {});\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, null)));\r\n            updateFormState();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaOrResolverValidation, executeValidation]);\r\n    const setInternalValues = useCallback((name, value, { shouldDirty, shouldValidate }) => {\r\n        const data = {};\r\n        set(data, name, value);\r\n        for (const fieldName of getPath(name, value)) {\r\n            if (fieldsRef.current[fieldName]) {\r\n                setFieldValue(fieldName, get(data, fieldName));\r\n                shouldDirty && updateAndGetDirtyState(fieldName);\r\n                shouldValidate && trigger(fieldName);\r\n            }\r\n        }\r\n    }, [trigger, setFieldValue, updateAndGetDirtyState]);\r\n    const setInternalValue = useCallback((name, value, config) => {\r\n        !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\r\n        if (fieldsRef.current[name]) {\r\n            setFieldValue(name, value);\r\n            config.shouldDirty && updateAndGetDirtyState(name);\r\n            config.shouldValidate && trigger(name);\r\n        }\r\n        else if (!isPrimitive(value)) {\r\n            setInternalValues(name, value, config);\r\n            if (fieldArrayNamesRef.current.has(name)) {\r\n                fieldArrayDefaultValuesRef.current[name] = value;\r\n                resetFieldArrayFunctionRef.current[name]({\r\n                    [name]: value,\r\n                });\r\n                if ((readFormStateRef.current.isDirty ||\r\n                    readFormStateRef.current.dirtyFields) &&\r\n                    config.shouldDirty) {\r\n                    set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n                    updateFormState({\r\n                        isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), { [name]: value }), defaultValuesRef.current),\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\r\n    }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\r\n    const isFieldWatched = (name) => isWatchAllRef.current ||\r\n        watchFieldsRef.current.has(name) ||\r\n        watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\r\n    const renderWatchedInputs = (name, found = true) => {\r\n        if (!isEmptyObject(useWatchFieldsRef.current)) {\r\n            for (const key in useWatchFieldsRef.current) {\r\n                if (!name ||\r\n                    !useWatchFieldsRef.current[key].size ||\r\n                    useWatchFieldsRef.current[key].has(name) ||\r\n                    useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\r\n                    useWatchRenderFunctionsRef.current[key]();\r\n                    found = false;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    };\r\n    function setValue(name, value, config) {\r\n        setInternalValue(name, value, config || {});\r\n        isFieldWatched(name) && updateFormState();\r\n        renderWatchedInputs(name);\r\n    }\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            let name = target.name;\r\n            const field = fieldsRef.current[name];\r\n            let error;\r\n            let isValid;\r\n            if (field) {\r\n                const isBlurEvent = type === EVENTS.BLUR;\r\n                const shouldSkipValidation = skipValidation(Object.assign({ isBlurEvent,\r\n                    isReValidateOnChange,\r\n                    isReValidateOnBlur, isTouched: !!get(formStateRef.current.touched, name), isSubmitted: formStateRef.current.isSubmitted }, modeRef.current));\r\n                let state = updateAndGetDirtyState(name, false);\r\n                let shouldRender = !isEmptyObject(state) ||\r\n                    isFieldWatched(name);\r\n                if (isBlurEvent &&\r\n                    !get(formStateRef.current.touched, name) &&\r\n                    readFormStateRef.current.touched) {\r\n                    set(formStateRef.current.touched, name, true);\r\n                    state = Object.assign(Object.assign({}, state), { touched: formStateRef.current.touched });\r\n                }\r\n                if (!shouldUnregister && isCheckBoxInput(target)) {\r\n                    set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\r\n                }\r\n                if (shouldSkipValidation) {\r\n                    renderWatchedInputs(name);\r\n                    return ((!isEmptyObject(state) ||\r\n                        (shouldRender && isEmptyObject(state))) &&\r\n                        updateFormState(state));\r\n                }\r\n                if (resolverRef.current) {\r\n                    const { errors } = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    error = get(errors, name);\r\n                    if (isCheckBoxInput(target) &&\r\n                        !error &&\r\n                        resolverRef.current) {\r\n                        const parentNodeName = getFieldArrayParentName(name);\r\n                        const currentError = get(errors, parentNodeName, {});\r\n                        currentError.type &&\r\n                            currentError.message &&\r\n                            (error = currentError);\r\n                        if (parentNodeName &&\r\n                            (currentError ||\r\n                                get(formStateRef.current.errors, parentNodeName))) {\r\n                            name = parentNodeName;\r\n                        }\r\n                    }\r\n                    isValid = isEmptyObject(errors);\r\n                    previousFormIsValid !== isValid && (shouldRender = true);\r\n                }\r\n                else {\r\n                    error = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];\r\n                }\r\n                renderWatchedInputs(name);\r\n                shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\r\n            }\r\n        };\r\n    function setFieldArrayDefaultValues(data) {\r\n        if (!shouldUnregister) {\r\n            let copy = cloneObject(data);\r\n            for (const value of fieldArrayNamesRef.current) {\r\n                if (isKey(value) && !copy[value]) {\r\n                    copy = Object.assign(Object.assign({}, copy), { [value]: [] });\r\n                }\r\n            }\r\n            return copy;\r\n        }\r\n        return data;\r\n    }\r\n    function getValues(payload) {\r\n        if (isString(payload)) {\r\n            return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\r\n        }\r\n        if (Array.isArray(payload)) {\r\n            const data = {};\r\n            for (const name of payload) {\r\n                set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\r\n            }\r\n            return data;\r\n        }\r\n        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));\r\n    }\r\n    const validateResolver = useCallback(async (values = {}) => {\r\n        const { errors } = await resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);\r\n        const isValid = isEmptyObject(errors);\r\n        formStateRef.current.isValid !== isValid &&\r\n            updateFormState({\r\n                isValid,\r\n            });\r\n    }, [isValidateAllFieldCriteria]);\r\n    const removeFieldEventListener = useCallback((field, forceDelete) => findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete), [shouldUnregister]);\r\n    const updateWatchedValue = useCallback((name) => {\r\n        if (isWatchAllRef.current) {\r\n            updateFormState();\r\n        }\r\n        else {\r\n            for (const watchField of watchFieldsRef.current) {\r\n                if (watchField.startsWith(name)) {\r\n                    updateFormState();\r\n                    break;\r\n                }\r\n            }\r\n            renderWatchedInputs(name);\r\n        }\r\n    }, []);\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (field) {\r\n            removeFieldEventListener(field, forceDelete);\r\n            if (shouldUnregister && !compact(field.options || []).length) {\r\n                unset(defaultValuesAtRenderRef.current, field.ref.name);\r\n                unset(validFieldsRef.current, field.ref.name);\r\n                unset(fieldsWithValidationRef.current, field.ref.name);\r\n                unset(formStateRef.current.errors, field.ref.name);\r\n                set(formStateRef.current.dirtyFields, field.ref.name, true);\r\n                updateFormState({\r\n                    isDirty: isFormDirty(),\r\n                });\r\n                readFormStateRef.current.isValid &&\r\n                    resolverRef.current &&\r\n                    validateResolver();\r\n                updateWatchedValue(field.ref.name);\r\n            }\r\n        }\r\n    }, [validateResolver, removeFieldEventListener]);\r\n    function clearErrors(name) {\r\n        name &&\r\n            (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName)\r\n                ? delete formStateRef.current.errors[inputName]\r\n                : unset(formStateRef.current.errors, inputName));\r\n        updateFormState({\r\n            errors: name ? formStateRef.current.errors : {},\r\n        });\r\n    }\r\n    function setError(name, error) {\r\n        const ref = (fieldsRef.current[name] || {}).ref;\r\n        set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), { ref }));\r\n        updateFormState({\r\n            isValid: false,\r\n        });\r\n        error.shouldFocus && ref && ref.focus && ref.focus();\r\n    }\r\n    const watchInternal = useCallback((fieldNames, defaultValue, watchId) => {\r\n        const watchFields = watchId\r\n            ? useWatchFieldsRef.current[watchId]\r\n            : watchFieldsRef.current;\r\n        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);\r\n        if (isString(fieldNames)) {\r\n            if (fieldArrayNamesRef.current.has(fieldNames)) {\r\n                const fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\r\n                fieldValues =\r\n                    !fieldArrayValue.length ||\r\n                        fieldArrayValue.length !==\r\n                            compact(get(fieldValues, fieldNames, [])).length\r\n                        ? fieldArrayValuesRef.current\r\n                        : fieldValues;\r\n            }\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get(defaultValuesRef.current, fieldNames))\r\n                ? defaultValue\r\n                : get(defaultValuesRef.current, fieldNames), true);\r\n        }\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? defaultValuesRef.current\r\n            : defaultValue;\r\n        if (Array.isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => (Object.assign(Object.assign({}, previous), { [name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues) })), {});\r\n        }\r\n        isWatchAllRef.current = isUndefined(watchId);\r\n        return transformToNestObject((!isEmptyObject(fieldValues) && fieldValues) ||\r\n            combinedDefaultValues);\r\n    }, []);\r\n    function watch(fieldNames, defaultValue) {\r\n        return watchInternal(fieldNames, defaultValue);\r\n    }\r\n    function unregister(name) {\r\n        for (const fieldName of Array.isArray(name) ? name : [name]) {\r\n            removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\r\n        }\r\n    }\r\n    function registerFieldRef(ref, options = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!ref.name) {\r\n                return console.warn('📋 Field is missing `name` attribute', ref, `https://react-hook-form.com/api#useForm`);\r\n            }\r\n            if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\r\n                !RegExp(`^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\r\n                    .replace(/\\[/g, '\\\\[')\r\n                    .replace(/\\]/g, '\\\\]')).test(ref.name)) {\r\n                return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldRefAndValidationOptions = Object.assign({ ref }, options);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);\r\n        let field = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let defaultValue;\r\n        if (field &&\r\n            (isRadioOrCheckbox\r\n                ? Array.isArray(field.options) &&\r\n                    compact(field.options).find((option) => {\r\n                        return value === option.ref.value && compareRef(option.ref);\r\n                    })\r\n                : compareRef(field.ref))) {\r\n            fields[name] = Object.assign(Object.assign({}, field), options);\r\n            return;\r\n        }\r\n        if (type) {\r\n            field = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...compact((field && field.options) || []),\r\n                        {\r\n                            ref,\r\n                        },\r\n                    ], ref: { type, name } }, options) : Object.assign({}, fieldRefAndValidationOptions);\r\n        }\r\n        else {\r\n            field = fieldRefAndValidationOptions;\r\n        }\r\n        fields[name] = field;\r\n        const isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\r\n        if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\r\n            defaultValue = get(isEmptyUnmountFields\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (!isEmptyObject(options)) {\r\n            set(fieldsWithValidationRef.current, name, true);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error) => {\r\n                    const previousFormIsValid = formStateRef.current.isValid;\r\n                    isEmptyObject(error)\r\n                        ? set(validFieldsRef.current, name, true)\r\n                        : unset(validFieldsRef.current, name);\r\n                    previousFormIsValid !== isEmptyObject(error) && updateFormState();\r\n                });\r\n            }\r\n        }\r\n        if (!defaultValuesAtRenderRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\r\n            set(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue\r\n                ? isObject(fieldValue)\r\n                    ? Object.assign({}, fieldValue) : fieldValue\r\n                : defaultValue);\r\n            !isFieldArray && unset(formStateRef.current.dirtyFields, name);\r\n        }\r\n        if (type) {\r\n            attachEventListeners(isRadioOrCheckbox && field.options\r\n                ? field.options[field.options.length - 1]\r\n                : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\r\n        }\r\n    }\r\n    function register(refOrRegisterOptions, options) {\r\n        if (!isWindowUndefined) {\r\n            if (isString(refOrRegisterOptions)) {\r\n                registerFieldRef({ name: refOrRegisterOptions }, options);\r\n            }\r\n            else if (isObject(refOrRegisterOptions) &&\r\n                'name' in refOrRegisterOptions) {\r\n                registerFieldRef(refOrRegisterOptions, options);\r\n            }\r\n            else {\r\n                return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);\r\n            }\r\n        }\r\n    }\r\n    const handleSubmit = useCallback((onValid, onInvalid) => async (e) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors = {};\r\n        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));\r\n        readFormStateRef.current.isSubmitting &&\r\n            updateFormState({\r\n                isSubmitting: true,\r\n            });\r\n        try {\r\n            if (resolverRef.current) {\r\n                const { errors, values } = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\r\n                formStateRef.current.errors = fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                for (const field of Object.values(fieldsRef.current)) {\r\n                    if (field) {\r\n                        const { name } = field.ref;\r\n                        const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\r\n                        if (fieldError[name]) {\r\n                            set(fieldErrors, name, fieldError[name]);\r\n                            unset(validFieldsRef.current, name);\r\n                        }\r\n                        else if (get(fieldsWithValidationRef.current, name)) {\r\n                            unset(formStateRef.current.errors, name);\r\n                            set(validFieldsRef.current, name, true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (isEmptyObject(fieldErrors) &&\r\n                Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {\r\n                updateFormState({\r\n                    errors: {},\r\n                    isSubmitting: true,\r\n                });\r\n                await onValid(fieldValues, e);\r\n            }\r\n            else {\r\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\r\n                onInvalid && (await onInvalid(formStateRef.current.errors, e));\r\n                shouldFocusError &&\r\n                    focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\r\n            }\r\n        }\r\n        finally {\r\n            formStateRef.current.isSubmitting = false;\r\n            updateFormState({\r\n                isSubmitted: true,\r\n                isSubmitting: false,\r\n                isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\r\n                submitCount: formStateRef.current.submitCount + 1,\r\n            });\r\n        }\r\n    }, [shouldFocusError, isValidateAllFieldCriteria]);\r\n    const resetRefs = ({ errors, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields, }) => {\r\n        if (!isValid) {\r\n            validFieldsRef.current = {};\r\n            fieldsWithValidationRef.current = {};\r\n        }\r\n        defaultValuesAtRenderRef.current = {};\r\n        fieldArrayDefaultValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        updateFormState({\r\n            submitCount: submitCount ? formStateRef.current.submitCount : 0,\r\n            isDirty: isDirty ? formStateRef.current.isDirty : false,\r\n            isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\r\n            isValid: isValid ? formStateRef.current.isValid : false,\r\n            dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\r\n            touched: touched ? formStateRef.current.touched : {},\r\n            errors: errors ? formStateRef.current.errors : {},\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: false,\r\n        });\r\n    };\r\n    const reset = (values, omitResetState = {}) => {\r\n        if (isWeb) {\r\n            for (const field of Object.values(fieldsRef.current)) {\r\n                if (field) {\r\n                    const { ref, options } = field;\r\n                    const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options)\r\n                        ? options[0].ref\r\n                        : ref;\r\n                    if (isHTMLElement(inputRef)) {\r\n                        try {\r\n                            inputRef.closest('form').reset();\r\n                            break;\r\n                        }\r\n                        catch (_a) { }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        fieldsRef.current = {};\r\n        defaultValuesRef.current = cloneObject(values || defaultValuesRef.current);\r\n        values && renderWatchedInputs('');\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray());\r\n        shallowFieldsStateRef.current = shouldUnregister\r\n            ? {}\r\n            : cloneObject(values) || {};\r\n        resetRefs(omitResetState);\r\n    };\r\n    useEffect(() => {\r\n        resolver && readFormStateRef.current.isValid && validateResolver();\r\n        observerRef.current =\r\n            observerRef.current || !isWeb\r\n                ? observerRef.current\r\n                : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\r\n    }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\r\n    useEffect(() => () => {\r\n        observerRef.current && observerRef.current.disconnect();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            return;\r\n        }\r\n        isUnMount.current = true;\r\n        Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, []);\r\n    if (!resolver && readFormStateRef.current.isValid) {\r\n        formState.isValid =\r\n            deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\r\n                isEmptyObject(formStateRef.current.errors);\r\n    }\r\n    const commonProps = {\r\n        trigger,\r\n        setValue: useCallback(setValue, [setInternalValue, trigger]),\r\n        getValues: useCallback(getValues, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n    };\r\n    const control = useMemo(() => (Object.assign({ isFormDirty,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        updateFormState,\r\n        removeFieldEventListener,\r\n        watchInternal, mode: modeRef.current, reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnChange,\r\n        }, validateResolver: resolver ? validateResolver : undefined, fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        useWatchFieldsRef,\r\n        useWatchRenderFunctionsRef,\r\n        fieldArrayDefaultValuesRef,\r\n        validFieldsRef,\r\n        fieldsWithValidationRef,\r\n        fieldArrayNamesRef,\r\n        readFormStateRef,\r\n        formStateRef,\r\n        defaultValuesRef,\r\n        shallowFieldsStateRef,\r\n        fieldArrayValuesRef }, commonProps)), [\r\n        defaultValuesRef.current,\r\n        updateWatchedValue,\r\n        shouldUnregister,\r\n        removeFieldEventListener,\r\n        watchInternal,\r\n    ]);\r\n    return Object.assign({ watch,\r\n        control, formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        if (prop === 'isValid' && isOnSubmit) {\r\n                            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\r\n                        }\r\n                    }\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return undefined;\r\n                },\r\n            })\r\n            : formState, handleSubmit, reset: useCallback(reset, []), clearErrors: useCallback(clearErrors, []), setError: useCallback(setError, []), errors: formState.errors }, commonProps);\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormContext = createContext(null);\r\nFormContext.displayName = 'RHFContext';\r\nconst useFormContext = () => useContext(FormContext);\r\nconst FormProvider = (_a) => {\r\n    var { children } = _a, props = __rest(_a, [\"children\"]);\r\n    return (createElement(FormContext.Provider, { value: Object.assign({}, props) }, children));\r\n};\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n\nvar moveArrayAt = (data, from, to) => {\r\n    if (Array.isArray(data)) {\r\n        if (isUndefined(data[to])) {\r\n            data[to] = undefined;\r\n        }\r\n        data.splice(to, 0, data.splice(from, 1)[0]);\r\n        return data;\r\n    }\r\n    return [];\r\n};\n\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    const temp = [data[indexB], data[indexA]];\r\n    data[indexA] = temp[0];\r\n    data[indexB] = temp[1];\r\n};\n\nfunction prepend(data, value) {\r\n    return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\r\n}\n\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...(Array.isArray(value) ? value : [value || undefined]),\r\n        ...data.slice(index),\r\n    ];\r\n}\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n\nvar fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data) => {\r\n    if (isObject(data)) {\r\n        const object = {};\r\n        for (const key in data) {\r\n            object[key] = true;\r\n        }\r\n        return object;\r\n    }\r\n    return true;\r\n});\n\nconst mapIds = (values = [], keyName) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        for (const value of values) {\r\n            if (typeof value === 'object') {\r\n                if (keyName in value) {\r\n                    console.warn(`📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                console.warn(`📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return values.map((value) => (Object.assign({ [keyName]: generateId() }, value)));\r\n};\r\nconst useFieldArray = ({ control, name, keyName = 'id', }) => {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\r\n        }\r\n    }\r\n    const focusIndexRef = useRef(-1);\r\n    const { isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef, } = control || methods.control;\r\n    const fieldArrayParentName = getFieldArrayParentName(name);\r\n    const memoizedDefaultValues = useRef([\r\n        ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\r\n            ? get(fieldArrayDefaultValuesRef.current, name, [])\r\n            : get(shouldUnregister\r\n                ? defaultValuesRef.current\r\n                : shallowFieldsStateRef.current, name, [])),\r\n    ]);\r\n    const [fields, setFields] = useState(mapIds(memoizedDefaultValues.current, keyName));\r\n    set(fieldArrayValuesRef.current, name, fields);\r\n    const omitKey = (fields) => fields.map((_a = {}) => {\r\n        var _b = keyName, omitted = _a[_b], rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\r\n        return rest;\r\n    });\r\n    fieldArrayNamesRef.current.add(name);\r\n    const getFieldArrayValue = useCallback(() => get(fieldArrayValuesRef.current, name, []), []);\r\n    const getCurrentFieldsValues = () => get(getValues(), name, getFieldArrayValue()).map((item, index) => (Object.assign(Object.assign({}, getFieldArrayValue()[index]), item)));\r\n    fieldArrayNamesRef.current.add(name);\r\n    if (fieldArrayParentName &&\r\n        !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\r\n        set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\r\n    }\r\n    const setFieldAndValidState = (fieldsValues) => {\r\n        setFields(fieldsValues);\r\n        set(fieldArrayValuesRef.current, name, fieldsValues);\r\n        if (readFormStateRef.current.isValid && validateResolver) {\r\n            const values = getValues();\r\n            set(values, name, fieldsValues);\r\n            validateResolver(values);\r\n        }\r\n    };\r\n    const resetFields = () => {\r\n        for (const key in fieldsRef.current) {\r\n            isMatchFieldArrayName(key, name) &&\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n        }\r\n    };\r\n    const cleanup = (ref) => !compact(get(ref, name, [])).length && unset(ref, name);\r\n    const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {\r\n        if (updatedFieldArrayValues) {\r\n            set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\r\n        }\r\n    };\r\n    const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {\r\n        if (get(shallowFieldsStateRef.current, name)) {\r\n            const output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(shallowFieldsStateRef.current, name, output);\r\n        }\r\n        if (get(fieldArrayDefaultValuesRef.current, name)) {\r\n            const output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\r\n            shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\r\n            cleanup(fieldArrayDefaultValuesRef.current);\r\n        }\r\n        if (Array.isArray(get(formStateRef.current.errors, name))) {\r\n            const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.errors, name, output);\r\n            cleanup(formStateRef.current.errors);\r\n        }\r\n        if (readFormStateRef.current.touched &&\r\n            get(formStateRef.current.touched, name)) {\r\n            const output = method(get(formStateRef.current.touched, name), args.argA, args.argB);\r\n            shouldSet && set(formStateRef.current.touched, name, output);\r\n            cleanup(formStateRef.current.touched);\r\n        }\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            const output = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\r\n            shouldSet && set(formStateRef.current.dirtyFields, name, output);\r\n            updateDirtyFieldsWithDefaultValues(updatedFieldValues);\r\n            cleanup(formStateRef.current.dirtyFields);\r\n        }\r\n        if (shouldUpdateValid &&\r\n            readFormStateRef.current.isValid &&\r\n            !validateResolver) {\r\n            set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\r\n            cleanup(validFieldsRef.current);\r\n            set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\r\n            cleanup(fieldsWithValidationRef.current);\r\n        }\r\n        updateFormState({\r\n            isDirty: isFormDirty(name, omitKey(updatedFormValues)),\r\n        });\r\n    };\r\n    const append = (value, shouldFocus = true) => {\r\n        const updateFormValues = [\r\n            ...getCurrentFieldsValues(),\r\n            ...mapIds(Array.isArray(value) ? value : [value], keyName),\r\n        ];\r\n        setFieldAndValidState(updateFormValues);\r\n        if (readFormStateRef.current.dirtyFields ||\r\n            readFormStateRef.current.isDirty) {\r\n            updateDirtyFieldsWithDefaultValues(updateFormValues);\r\n            updateFormState({\r\n                isDirty: true,\r\n                dirtyFields: formStateRef.current.dirtyFields,\r\n            });\r\n        }\r\n        !shouldUnregister &&\r\n            set(shallowFieldsStateRef.current, name, [\r\n                ...(get(shallowFieldsStateRef.current, name) || []),\r\n                value,\r\n            ]);\r\n        focusIndexRef.current = shouldFocus ? fields.length : -1;\r\n    };\r\n    const prepend$1 = (value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(prepend, {\r\n            argA: emptyArray,\r\n            argC: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues);\r\n        focusIndexRef.current = shouldFocus ? 0 : -1;\r\n    };\r\n    const remove = (index) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldValues = removeArrayAt(fieldValues, index);\r\n        setFieldAndValidState(updatedFieldValues);\r\n        resetFields();\r\n        batchStateUpdate(removeArrayAt, {\r\n            argA: index,\r\n            argC: index,\r\n        }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\r\n    };\r\n    const insert$1 = (index, value, shouldFocus = true) => {\r\n        const emptyArray = fillEmptyArray(value);\r\n        const fieldValues = getCurrentFieldsValues();\r\n        const updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\r\n        setFieldAndValidState(updatedFieldArrayValues);\r\n        resetFields();\r\n        batchStateUpdate(insert, {\r\n            argA: index,\r\n            argB: emptyArray,\r\n            argC: index,\r\n            argD: fillBooleanArray(value),\r\n        }, updatedFieldArrayValues, insert(fieldValues, index));\r\n        focusIndexRef.current = shouldFocus ? index : -1;\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n            argC: indexA,\r\n            argD: indexB,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const fieldValues = getCurrentFieldsValues();\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields();\r\n        setFieldAndValidState([...fieldValues]);\r\n        batchStateUpdate(moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n            argC: from,\r\n            argD: to,\r\n        }, undefined, fieldValues, false);\r\n    };\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\r\n            }\r\n        }\r\n        const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\r\n        if (defaultValues && fields.length < defaultValues.length) {\r\n            defaultValues.pop();\r\n            set(fieldArrayDefaultValuesRef.current, name, defaultValues);\r\n        }\r\n        updateWatchedValue(name);\r\n        if (focusIndexRef.current > -1) {\r\n            for (const key in fieldsRef.current) {\r\n                const field = fieldsRef.current[key];\r\n                if (key.startsWith(`${name}[${focusIndexRef.current}]`) &&\r\n                    field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        focusIndexRef.current = -1;\r\n    }, [fields, name]);\r\n    useEffect(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        if (!getFieldArrayParentName(name)) {\r\n            resetFunctions[name] = (data) => {\r\n                resetFields();\r\n                !data && unset(fieldArrayDefaultValuesRef.current, name);\r\n                unset(shallowFieldsStateRef.current, name);\r\n                memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\r\n                setFields(mapIds(memoizedDefaultValues.current, keyName));\r\n            };\r\n        }\r\n        return () => {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                return;\r\n            }\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            unset(fieldArrayValuesRef, name);\r\n            fieldArrayNames.delete(name);\r\n        };\r\n    }, []);\r\n    return {\r\n        swap: useCallback(swap, [name]),\r\n        move: useCallback(move, [name]),\r\n        prepend: useCallback(prepend$1, [name]),\r\n        append: useCallback(append, [name, fields]),\r\n        remove: useCallback(remove, [name]),\r\n        insert: useCallback(insert$1, [name]),\r\n        fields,\r\n    };\r\n};\n\nfunction useWatch({ control, name, defaultValue, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\r\n        }\r\n    }\r\n    const { useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef, } = control || methods.control;\r\n    const updateValue = useState()[1];\r\n    const idRef = useRef();\r\n    const defaultValueRef = useRef(defaultValue);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (name === '') {\r\n                console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\r\n            }\r\n        }\r\n        const id = (idRef.current = generateId());\r\n        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\r\n        const watchFieldsHook = useWatchFieldsRef.current;\r\n        watchFieldsHook[id] = new Set();\r\n        watchFieldsHookRender[id] = () => updateValue({});\r\n        watchInternal(name, defaultValueRef.current, id);\r\n        return () => {\r\n            delete watchFieldsHook[id];\r\n            delete watchFieldsHookRender[id];\r\n        };\r\n    }, [\r\n        name,\r\n        useWatchRenderFunctionsRef,\r\n        useWatchFieldsRef,\r\n        watchInternal,\r\n        defaultValueRef,\r\n    ]);\r\n    return idRef.current\r\n        ? watchInternal(name, defaultValueRef.current, idRef.current)\r\n        : isUndefined(defaultValue)\r\n            ? isString(name)\r\n                ? get(defaultValuesRef.current, name)\r\n                : Array.isArray(name)\r\n                    ? name.reduce((previous, inputName) => (Object.assign(Object.assign({}, previous), { [inputName]: get(defaultValuesRef.current, inputName) })), {})\r\n                    : defaultValuesRef.current\r\n            : defaultValue;\r\n}\n\nvar getInputValue = (event) => isPrimitive(event) ||\r\n    !isObject(event.target) ||\r\n    (isObject(event.target) && !event.type)\r\n    ? event\r\n    : isUndefined(event.target.value)\r\n        ? event.target.checked\r\n        : event.target.value;\n\nfunction useField({ name, rules, defaultValue, control, onFocus, }) {\r\n    const methods = useFormContext();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (!control && !methods) {\r\n            throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\r\n        }\r\n    }\r\n    const { defaultValuesRef, setValue, register, unregister, trigger, mode, reValidateMode: { isReValidateOnBlur, isReValidateOnChange }, formStateRef: { current: { isSubmitted, touched, errors, dirtyFields }, }, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef, } = control || methods.control;\r\n    const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n    const getInitialValue = () => !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\r\n        ? get(shallowFieldsStateRef.current, name)\r\n        : isUndefined(defaultValue)\r\n            ? get(defaultValuesRef.current, name)\r\n            : defaultValue;\r\n    const [value, setInputStateValue] = useState(getInitialValue());\r\n    const valueRef = useRef(value);\r\n    const ref = useRef({\r\n        focus: () => null,\r\n    });\r\n    const onFocusRef = useRef(onFocus ||\r\n        (() => {\r\n            if (isFunction(ref.current.focus)) {\r\n                ref.current.focus();\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (!isFunction(ref.current.focus)) {\r\n                    console.warn(`📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);\r\n                }\r\n            }\r\n        }));\r\n    const shouldValidate = useCallback((isBlurEvent) => !skipValidation(Object.assign({ isBlurEvent,\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted, isTouched: !!get(touched, name) }, mode)), [\r\n        isReValidateOnBlur,\r\n        isReValidateOnChange,\r\n        isSubmitted,\r\n        touched,\r\n        name,\r\n        mode,\r\n    ]);\r\n    const commonTask = useCallback(([event]) => {\r\n        const data = getInputValue(event);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    }, []);\r\n    const registerField = useCallback((shouldUpdateValue) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!name) {\r\n                return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        if (fieldsRef.current[name]) {\r\n            fieldsRef.current[name] = Object.assign({ ref: fieldsRef.current[name].ref }, rules);\r\n        }\r\n        else {\r\n            register(Object.defineProperty({\r\n                name,\r\n                focus: onFocusRef.current,\r\n            }, 'value', {\r\n                set(data) {\r\n                    setInputStateValue(data);\r\n                    valueRef.current = data;\r\n                },\r\n                get() {\r\n                    return valueRef.current;\r\n                },\r\n            }), rules);\r\n            shouldUpdateValue = isUndefined(get(defaultValuesRef.current, name));\r\n        }\r\n        shouldUpdateValue &&\r\n            isNotFieldArray &&\r\n            setInputStateValue(getInitialValue());\r\n    }, [rules, name, register]);\r\n    useEffect(() => () => unregister(name), [name]);\r\n    useEffect(() => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (isUndefined(value)) {\r\n                console.warn(`📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);\r\n            }\r\n            if (!isNotFieldArray && isUndefined(defaultValue)) {\r\n                console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\r\n            }\r\n        }\r\n        registerField();\r\n    }, [registerField]);\r\n    useEffect(() => {\r\n        !fieldsRef.current[name] && registerField(true);\r\n    });\r\n    const onBlur = useCallback(() => {\r\n        if (readFormStateRef.current.touched && !get(touched, name)) {\r\n            set(touched, name, true);\r\n            updateFormState({\r\n                touched,\r\n            });\r\n        }\r\n        shouldValidate(true) && trigger(name);\r\n    }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\r\n    const onChange = useCallback((...event) => setValue(name, commonTask(event), {\r\n        shouldValidate: shouldValidate(),\r\n        shouldDirty: true,\r\n    }), [setValue, name, shouldValidate]);\r\n    return {\r\n        field: {\r\n            onChange,\r\n            onBlur,\r\n            name,\r\n            value,\r\n            ref,\r\n        },\r\n        state: {\r\n            inValid: !get(errors, name),\r\n            isDirty: !!get(dirtyFields, name),\r\n            isTouched: !!get(touched, name),\r\n        },\r\n    };\r\n}\n\nconst Controller = (props) => {\r\n    const { rules, as, render, defaultValue, control, onFocus } = props, rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\r\n    const { field } = useField(props);\r\n    const componentProps = Object.assign(Object.assign({}, rest), field);\r\n    return as\r\n        ? isValidElement(as)\r\n            ? cloneElement(as, componentProps)\r\n            : createElement(as, componentProps)\r\n        : render\r\n            ? render(field)\r\n            : null;\r\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useFieldArray, useForm, useFormContext, useWatch };\n//# sourceMappingURL=index.esm.js.map\n","import { Link, graphql } from \"gatsby\"\r\nimport React from \"react\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport Footer from \"../components/footer/footer\"\r\nimport Navbar from \"../components/navbar/navbar\"\r\nimport \"../pageScss/blog.sass\"\r\n\r\nexport default function Blog({ data }) {\r\n  const { register, watch } = useForm()\r\n  var links = []\r\n  var linksCount = 0\r\n\r\n  for (let i = 0; i < data.allMarkdownRemark.edges.length; i++) {\r\n    var titleSearch = data.allMarkdownRemark.edges[i].node.frontmatter.title\r\n      .toLowerCase()\r\n      .split(\" \")\r\n    const date = data.allMarkdownRemark.edges[i].node.frontmatter.date.split(\r\n      \"-\"\r\n    )\r\n    for (let i = 0; i < date.length; i++) {\r\n      titleSearch.push(date[i])\r\n    }\r\n    titleSearch.push(data.allMarkdownRemark.edges[i].node.frontmatter.date)\r\n    var isFound = true\r\n    if (watch(\"search\") !== undefined) {\r\n      var searchValue = watch(\"search\").toLowerCase().split(\" \")\r\n      isFound = checkIfFound(titleSearch, searchValue)\r\n    }\r\n    if (isFound) {\r\n      links.push(\r\n        <div\r\n          className=\"blog-card\"\r\n          key={data.allMarkdownRemark.edges[i].node.frontmatter.title}\r\n        >\r\n          <Link to={data.allMarkdownRemark.edges[i].node.fields.slug}>\r\n            {data.allMarkdownRemark.edges[i].node.frontmatter.title}\r\n          </Link>\r\n          <div className=\"blog-info\">\r\n            <p>{data.allMarkdownRemark.edges[i].node.frontmatter.date}</p>\r\n            <p>\r\n              Word Count: {data.allMarkdownRemark.edges[i].node.wordCount.words}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )\r\n      linksCount++\r\n    } else {\r\n      links.push(null)\r\n    }\r\n    if (links.length > 16) {\r\n      break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <main className=\"blog-main\">\r\n        <h1>Blog Posts</h1>\r\n        <form>\r\n          <input\r\n            name=\"search\"\r\n            type=\"text\"\r\n            ref={register}\r\n            defaultValue=\"\"\r\n            className=\"blog-search-bar\"\r\n            placeholder=\"Search for Blog\"\r\n          />\r\n        </form>\r\n        <div className=\"blog-link-container\">{links}</div>\r\n        {linksCount < 4 ? (\r\n          linksCount < 1 ? (\r\n            <p\r\n              style={{\r\n                height: \"200px\",\r\n                width: \"300px\",\r\n                margin: \"32px auto\",\r\n                display: \"block\",\r\n              }}\r\n            >\r\n              Nothing was found...\r\n            </p>\r\n          ) : (\r\n            <div style={{ height: \"120px\", width: \"100px\" }}></div>\r\n          )\r\n        ) : null}\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: [DESC] }) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          wordCount {\r\n            words\r\n          }\r\n          frontmatter {\r\n            date\r\n            title\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nfunction checkIfFound(title, search) {\r\n  for (let i = 0; i < title.length; i++) {\r\n    for (let j = 0; j < search.length; j++) {\r\n      var checkCharacter = true\r\n      for (let k = 0; k < search[j].length; k++) {\r\n        if (search[j].charAt(k) !== title[i].charAt(k)) {\r\n          checkCharacter = false\r\n        }\r\n      }\r\n      if (checkCharacter) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n  return false\r\n}\r\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}"],"names":["StationaryButton","props","isNewTab","React","href","link","target","rel","className","style","css","type","buttonType","title","Link","to","FooterLinks","_React$Component","apply","arguments","_inheritsLoose","prototype","render","LINKS","this","footerlinks","map","string","color","toLowerCase","replace","key","DATE","Date","Footer","getFullYear","Navlinks","_this","call","showLinks","setState","state","height","links","length","hideLinks","bind","_assertThisInitialized","onMouseOver","onMouseLeave","onClick","clickMe","Sidebar","sidelinks","charAt","toUpperCase","substring","sidebarCss","clickHide","repo","blog","about","Navbar","showSide","top","hideSide","navLinksHTML","i","Object","keys","push","Hamburger","isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isObjectType","isObject","Array","isArray","isKey","test","compact","filter","Boolean","stringToPath","input","split","set","object","path","index","tempPath","lastIndex","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","get","obj","defaultValue","result","reduce","focusOnErrorField","fields","fieldErrors","field","ref","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","previous","option","checked","getMultipleSelectValue","selected","isRadioInput","element","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","valueAsNumber","valueAsDate","setValueAs","files","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","isBoolean","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isPrimitive","deepMerge","source","targetValue","sourceValue","_a","setDirtyFields","defaultValues","dirtyFields","parentName","assign","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","shouldUnregister","search","output","startsWith","find","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","getValidateError","appendErrors","validateAllFieldCriteria","types","validateField","async","required","maxLength","minLength","min","max","pattern","validate","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","validateRef","validateError","validationResult","validateFunction","entries","getPath","rootPath","paths","property","rootName","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","isWeb","window","document","cloneObject","copy","File","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","formState","setFormState","useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","readFormStateRef","formStateRef","observerRef","updateFormState","useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","shouldSkipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","findRemovedFieldAndRemoveListener","updateWatchedValue","watchField","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","control","useMemo","watch","prop","reset","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","shouldFocus","FormContext","createContext","displayName","Blog","_ref","linksCount","allMarkdownRemark","edges","titleSearch","node","frontmatter","date","isFound","checkIfFound","slug","wordCount","words","placeholder","width","margin","display","j","checkCharacter","self","ReferenceError"],"sourceRoot":""}